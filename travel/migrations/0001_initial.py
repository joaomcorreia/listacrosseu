# Generated by Django 5.0.7 on 2025-10-06 17:51

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('businesses', '0007_add_duplicate_prevention_constraints'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ItineraryDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_number', models.PositiveIntegerField(verbose_name='day number')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'Itinerary Day',
                'verbose_name_plural': 'Itinerary Days',
                'ordering': ['day_number'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='name')),
                ('slug', models.SlugField(blank=True, unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('color', models.CharField(default='#007cba', help_text='Hex color code', max_length=7, verbose_name='color')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('slug', models.SlugField(blank=True, unique=True, verbose_name='slug')),
                ('subtitle', models.CharField(blank=True, max_length=300, verbose_name='subtitle')),
                ('excerpt', models.TextField(help_text='Short description for listings', max_length=500, verbose_name='excerpt')),
                ('content', models.TextField(help_text='Main article content (supports Markdown)', verbose_name='content')),
                ('featured_image', models.ImageField(blank=True, upload_to='articles/', verbose_name='featured image')),
                ('featured_image_alt', models.CharField(blank=True, max_length=200, verbose_name='featured image alt text')),
                ('article_type', models.CharField(choices=[('guide', 'City Guide'), ('itinerary', 'Travel Itinerary'), ('review', 'Travel Review'), ('tips', 'Travel Tips'), ('culture', 'Local Culture'), ('business_feature', 'Business Feature'), ('seasonal', 'Seasonal Content'), ('comparison', 'City/Business Comparison')], default='guide', max_length=20, verbose_name='article type')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('review', 'Under Review'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=10, verbose_name='status')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='published at')),
                ('meta_title', models.CharField(blank=True, max_length=60, verbose_name='meta title')),
                ('meta_description', models.CharField(blank=True, max_length=160, verbose_name='meta description')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='view count')),
                ('featured', models.BooleanField(default=False, verbose_name='featured')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='travel_articles', to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('cities', models.ManyToManyField(blank=True, help_text='Cities this article covers', to='businesses.city', verbose_name='cities')),
                ('countries', models.ManyToManyField(blank=True, help_text='Countries this article covers', to='businesses.country', verbose_name='countries')),
            ],
            options={
                'verbose_name': 'Article',
                'verbose_name_plural': 'Articles',
                'ordering': ['-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ArticleBusinessFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, help_text='Why this business is featured', verbose_name='description')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='sort order')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='travel.article')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='businesses.business')),
            ],
            options={
                'verbose_name': 'Article Business Feature',
                'verbose_name_plural': 'Article Business Features',
                'ordering': ['sort_order', 'created_at'],
                'unique_together': {('article', 'business')},
            },
        ),
        migrations.AddField(
            model_name='article',
            name='featured_businesses',
            field=models.ManyToManyField(blank=True, through='travel.ArticleBusinessFeature', to='businesses.business', verbose_name='featured businesses'),
        ),
        migrations.CreateModel(
            name='ArticleCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(blank=True, unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('icon', models.CharField(blank=True, help_text='Emoji or FontAwesome icon', max_length=50, verbose_name='icon')),
                ('color', models.CharField(default='#28a745', help_text='Hex color code', max_length=7, verbose_name='color')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='sort order')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='travel.articlecategory')),
            ],
            options={
                'verbose_name': 'Article Category',
                'verbose_name_plural': 'Article Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='article',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='travel.articlecategory', verbose_name='category'),
        ),
        migrations.CreateModel(
            name='ItineraryStop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('time_slot', models.CharField(choices=[('morning', 'Morning (9:00-12:00)'), ('afternoon', 'Afternoon (12:00-18:00)'), ('evening', 'Evening (18:00-22:00)'), ('night', 'Night (22:00+)'), ('custom', 'Custom Time')], default='morning', max_length=15, verbose_name='time slot')),
                ('custom_time', models.TimeField(blank=True, null=True, verbose_name='custom time')),
                ('duration_minutes', models.PositiveIntegerField(default=60, verbose_name='duration (minutes)')),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost in EUR', max_digits=8, null=True, verbose_name='estimated cost')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='sort order')),
                ('tips', models.TextField(blank=True, help_text='Helpful tips for this stop', verbose_name='tips')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('business', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='businesses.business', verbose_name='business')),
                ('day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stops', to='travel.itineraryday', verbose_name='day')),
            ],
            options={
                'verbose_name': 'Itinerary Stop',
                'verbose_name_plural': 'Itinerary Stops',
                'ordering': ['sort_order', 'custom_time'],
            },
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(blank=True, to='travel.tag', verbose_name='tags'),
        ),
        migrations.CreateModel(
            name='TravelItinerary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('slug', models.SlugField(blank=True, unique=True, verbose_name='slug')),
                ('description', models.TextField(verbose_name='description')),
                ('duration_type', models.CharField(choices=[('half_day', 'Half Day (4 hours)'), ('full_day', 'Full Day (8 hours)'), ('weekend', 'Weekend (2 days)'), ('3_days', '3 Days'), ('week', '1 Week'), ('custom', 'Custom Duration')], default='full_day', max_length=15, verbose_name='duration type')),
                ('custom_duration_days', models.PositiveIntegerField(blank=True, null=True, verbose_name='custom duration (days)')),
                ('featured_image', models.ImageField(blank=True, upload_to='itineraries/', verbose_name='featured image')),
                ('total_cost_estimate', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated cost in EUR', max_digits=10, null=True, verbose_name='total cost estimate')),
                ('is_published', models.BooleanField(default=False, verbose_name='is published')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='view count')),
                ('featured', models.BooleanField(default=False, verbose_name='featured')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='businesses.city', verbose_name='city')),
            ],
            options={
                'verbose_name': 'Travel Itinerary',
                'verbose_name_plural': 'Travel Itineraries',
                'ordering': ['-featured', '-view_count', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='itineraryday',
            name='itinerary',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='days', to='travel.travelitinerary', verbose_name='itinerary'),
        ),
        migrations.CreateModel(
            name='ArticleView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('referrer', models.URLField(blank=True)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='travel.article')),
            ],
            options={
                'verbose_name': 'Article View',
                'verbose_name_plural': 'Article Views',
                'indexes': [models.Index(fields=['article', 'viewed_at'], name='travel_arti_article_7e3046_idx'), models.Index(fields=['ip_address', 'viewed_at'], name='travel_arti_ip_addr_fd23ce_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['status', 'published_at'], name='travel_arti_status_4cca09_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['article_type', 'featured'], name='travel_arti_article_814e36_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['view_count'], name='travel_arti_view_co_5df693_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='itineraryday',
            unique_together={('itinerary', 'day_number')},
        ),
    ]
